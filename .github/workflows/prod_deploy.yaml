name: Build and deploy to production
on:
  pull_request:
    types: closed
    branches:
      - main
jobs:
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Generate .env
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: False
          envkey_DJANGO_SETTINGS_MODULE: config.settings.dev
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DOMAIN: ${{ secrets.DOMAIN }}
          envkey_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          envkey_CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          envkey_CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
          envkey_ERROR_LOG_FILENAME: ${{ secrets.ERROR_LOG_FILENAME }}
          envkey_ACCESS_TOKEN_LIFETIME: ${{ secrets.ACCESS_TOKEN_LIFETIME }}
          envkey_REFRESH_TOKEN_LIFETIME: ${{ secrets.REFRESH_TOKEN_LIFETIME }}
          envkey_AUTH_COOKIE: ${{ secrets.AUTH_COOKIE }}
          envkey_AUTH_REFRESH: ${{ secrets.AUTH_REFRESH }}
          envkey_POSTGRES_DB: ${{ secrets.DB_NAME }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_PORT: ${{ secrets.DB_PORT }}
          envkey_POSTGRES_HOST: ${{ secrets.DB_HOST }}
          envkey_DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          envkey_EMAIL_FILE: ${{ secrets.EMAIL_FILE }}
          envkey_EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          envkey_EMAIL_USE_TLS: "YES"
          envkey_EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          envkey_EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          envkey_EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          envkey_REDDIS_HOST: ${{ secrets.REDDIS_HOST }}
          envkey_REDDIS_PORT: ${{ secrets.REDDIS_PORT }}
          envkey_TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          envkey_TELEGRAM_SUPPORT_CHAT_ID: ${{ secrets.TELEGRAM_SUPPORT_CHAT_ID }}
          envkey_TELEGRAM_MANAGER_CHAT_ID: ${{ secrets.TELEGRAM_MANAGER_CHAT_ID }}
          envkey_TELEGRAM_MODERATORS_CHAT_ID: ${{ secrets.TELEGRAM_MODERATORS_CHAT_ID }}
          envkey_TELEGRAM_MODERATORS_CHAT_TOPIC: ${{ secrets.TELEGRAM_MODERATORS_CHAT_TOPIC }}
          envkey_SOCIAL_AUTH_VK_OAUTH2_KEY: ${{ secrets.SOCIAL_AUTH_VK_OAUTH2_KEY }}
          envkey_SOCIAL_AUTH_VK_OAUTH2_SECRET: ${{ secrets.SOCIAL_AUTH_VK_OAUTH2_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          build-args: ENV_FILE=.env
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sunny_ekb:latest
      - name: Copy .env file to server using SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: ".env"
          target: ${{ secrets.TARGET_SERVER_PATH }}

  deploy:
    name: Deploy from image in Docker Hub
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ secrets.TARGET_SERVER_PATH }} &&
            docker-compose exec -T backend python3 manage.py dumpdata --settings config.settings.dev --indent 2 --exclude admin.logentry --exclude sessions.session > dump_$(date +%Y%m%d_%H%M).json &&
            docker-compose stop &&
            docker-compose rm -f backend &&
            docker-compose rm -f celery &&
            docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/sunny_ekb &&
            docker-compose up -d &&
            docker-compose exec -T backend python manage.py migrate --settings config.settings.dev
